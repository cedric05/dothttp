//HTTP: ram=HTTP2
MULTISET: allhttps=HTTP+;

HTTP:((namewrap=NAMEWRAP)?
    urlwrap=URL
    (basic_auth_wrap=BASICAUTH)?
    (lines *= LINE)?
    (payload=PAYLOAD)?
    (output=TOFILE)?);

URL: 
    (method=METHODTYPE)? url=URLString
;

NAMEWRAP:
    '@name' '(' name=DotString ')'
;

LINE: 
    (query=QUERY) | (header=HEADER)
;

HEADER: 
    'header' '(' key=DotString ',' value=DotString ')'
    | key=DotString ':' value=DotString
;

BASICAUTH:
    'basicauth' '(' username=DotString ',' password= DotString ')'
;

METHODTYPE: 
    "GET" | "POST" | "OPTIONS"
    | "DELETE" | "CONNECT" | "PUT"
    | "HEAD" | "TRACE" | "PATCH"
    | "COPY" | "LINK" | "UNLINK"
    | "PURGE" | "LOCK" | "UNLOCK"
    | "PROPFIND" | "VIEW"
;

QUERY: 
    'query' '(' key=DotString ',' value=DotString ')'
    | '?' '(' key=DotString ',' value=DotString ')'
    | '?' key=DotString ',' value=DotString
    | '?' key=DotString ':' value=DotString
    | '?' key=DotString '=' value=DotString
;

PAYLOAD: 
    (   'data' '(' data=STRING (',' type=STRING)? ','?  ')'
        | 'data' '(' datajson=JSON (',' type=STRING)? ','? ')'
        | 'urlencoded' '(' datajson=JSON (',' type=STRING)? ','? ')'
        | 'fileinput' '(' file=STRING   (',' type=STRING)? ','?  ')'
        | ('json' '(' json=JSON  ')' )
        | (fileswrap=FILES)
        | (form=FILES)
    )
;

FILES:
    "files" "(" files*=FILETYPE[','] ','? ")"
;

FILETYPE:
    ( '(' name=STRING ',' path=STRING (',' type=STRING)? ')')
;

TOFILE: 'output' '('output=STRING ')';

JSON:
    array=Array | object=Object
;

Array:
    "[" (values*=Value[','] ) ','? "]"
;

Value:
    str=String | var=VarString | flt=Float | bl=Bool | object=Object | array=Array | null="null"
;


Bool:
    value=BOOL
;

Float:
    value=FLOAT
;

String: 
    value=STRING
;

Object:
    "{" members*=Member[','] ","? "}"
;

Member:
    (key=STRING ':' value=Value) |
    (var=VarString ':' value=Value)
;
Comment:
    UnixComment | CommentLine | CommentBlock
;
UnixComment:
    /#.*$/
;
CommentLine:
    /\/\/.*?$/
;

CommentBlock:
    /\/\*(.|\n)*?\*\//
;

VarString:
    "{{" /[\w,$,:]+/ ("="  (/\w+/ | STRING))? "}}"
;

DotString:
    STRING | /\w+/
;
// allow only alphanumeric or string in double/single quotes

URLString:
    STRING | /https\:\/\/(\S)+/
    | /http\:\/\/(\S)+/
;
// allows http or https till space otherwise go for string