//HTTP: ram=HTTP2
MULTISET: allhttps=HTTP+;

HTTP:((namewrap=NAMEWRAP)?
        "curl"?
        urlwrap=URL
        (authwrap=AUTHWRAP)?
        (lines *= LINE)?
        (payload=PAYLOAD)?
        (output=TOFILE)?
        (script_wrap=HTTP_TEST_SCRIPT)?
    )
;

URL:
    ('-X'? method=METHODTYPE)? url=URLString SLASH?
;

NAMEWRAP:
    // postman does it same like inherit auth
    // here we extend both headers and auth
    '@name' '(' name=DotString ')' (':' base=DotString)?
;

LINE: 
    (query=QUERY) | (header=HEADER)
;

HEADER: 
    'header' '(' key=DotString ',' value=DotString ')'
    | key=DotString ':' value=DotString
    | /-H|--header/  key=/'[\w-]+/ ':' value=/\S(.*\S)?'/ SLASH?
    | /-H|--header/  key=/"[\w-]+/ ':' value=/\S(.*\S)?"/ SLASH?
    | /-H|--header/  key=/[\w-]+/ ':' value=/\S(.*\S)?/ SLASH?
    | key=/'[\w-]+/ ':' value=/\S(.*\S)?'/ SLASH?
    | key=/"[\w-]+/ ':' value=/\S(.*\S)?"/ SLASH?
    | key=/[\w-]+/ ':' value=/\S(.*\S)?/ SLASH?
;

AUTHWRAP:
    digest_auth = DIGESTAUTH |  basic_auth = BASICAUTH
;


DIGESTAUTH:
    'digestauth' '(' username=DotString ',' password= DotString ')'

;

BASICAUTH:
    'basicauth' '(' username=DotString ',' password= DotString ')'
;

METHODTYPE2:
    "get" | "post" | "options"
    | "delete" | "connect" | "put"
    | "head" | "trace" | "patch"
    | "copy" | "link" | "unlink"
    | "purge" | "lock" | "unlock"
    | "propfind" | "view"
;


METHODTYPE: 
    "GET" | "POST" | "OPTIONS"
    | "DELETE" | "CONNECT" | "PUT"
    | "HEAD" | "TRACE" | "PATCH"
    | "COPY" | "LINK" | "UNLINK"
    | "PURGE" | "LOCK" | "UNLOCK"
    | "PROPFIND" | "VIEW"
;

QUERY: 
    'query' '(' key=DotString ',' value=DotString ')'
    | '?' '(' key=DotString ',' value=DotString ')'
    | '?' key=DotString ',' value=DotString
    | '?' key=DotString ':' value=DotString
    | '?' key=DotString '=' value=DotString
;

PAYLOAD: 
    (   'data' '(' data+=TRIPLE_OR_DOUBLE_STRING (',' type=STRING)? ','?  ')'
        | 'data' '(' datajson=JSON (',' type=STRING)? ','? ')'
        | /-d|--data/ data+=TRIPLE_OR_DOUBLE_STRING
        | 'urlencoded' '(' datajson=JSON (',' type=STRING)? ','? ')'
        | 'fileinput' '(' file=STRING   (',' type=STRING)? ','?  ')'
        | ('json' '(' json=JSON  ')' )
        | (fileswrap=FILES)
        | (form=FILES)
    )
;

TRIPLE_OR_DOUBLE_STRING:
    triple = TRIPLE_QUOTE_STRING | str = STRING
;


FILES:
    "files" "(" files*=FILETYPE[','] ','? ")"
;

FILETYPE:
    ( '(' name=STRING ',' path=STRING  (',' (type=STRING)?)? ')')
;

TOFILE:
    ('output' '('output=STRING ')')
;

JSON:
    array=Array | object=Object
;

Array:
    "[" (values*=Value[','] ) ','? "]"
;

Value:
    strs += TRIPLE_OR_DOUBLE_STRING | var=VarString |  flt=Float | int=Int | bl=Bool | object=Object | array=Array | null="null"
;


Bool:
    value=BOOL
;

Int:
    value=INT
;

Float:
    value=STRICTFLOAT
;

String: 
    value=STRING
;

Object:
    "{" members*=Member[','] ","? "}"
;

Member:
    (key+=TRIPLE_OR_DOUBLE_STRING ':' value=Value) |
    (var=VarString ':' value=Value)
;
Comment:
    UnixComment | CommentLine | CommentBlock
;
UnixComment:
    /#.*$/
;
CommentLine:
    /\/\/.*?$/
;

CommentBlock:
    /\/\*(.|\n)*?\*\//
;

VarString:
    "{{" /[\w,$,:]+/ ("="  (/\w+/ | STRING))? "}}"
;

DotString:
    STRING | /\w+/
;
// allow only alphanumeric or string in double/single quotes

TRIPLE_QUOTE_STRING:
        /"""[\S\s]*?"""/ | /'''[\S\s]*?'''/

;

URLString:
    STRING | /https\:\/\/(\S)+/
    | /http\:\/\/(\S)+/
;
// allows http or https till space otherwise go for

HTTP_TEST_SCRIPT:
    script=/> {%[\s\S]*?%}/
;

SLASH:
    '\'
;