{"files": {"Postman_Echo_(V2)\\Auth_Digest\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\n// The `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n// \n// When this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables) named `echo_digest_nonce` and `echo_digest_realm`.\n// These variables are re-used in subsequent request for seamless integration of the two requests.\n\n@name(\"DigestAuth Request\")\nGET \"https://postman-echo.com/digest-auth\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n// This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n// \n// Within Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.\n\n@name(\"DigestAuth Success\")\nGET \"https://postman-echo.com/digest-auth\"\ndigestauth(\"postman\", \"password\")\n\"Authorization\": 'Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\"'\n\n\n\n\n", "Postman_Echo_(V2)\\Auth_Others\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// This endpoint simulates a **basic-auth** protected endpoint. \n// The endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \n// Otherwise it will return a status code `401 unauthorized`.\n// \n// > Username: `postman`\n// > \n// > Password: `password`\n// \n// To use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \n// The cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \n// Using Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n// \n// To know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\n// The article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth) elaborates how to use the same within the Postman app.\n\n@name(\"Basic Auth\")\nGET \"https://postman-echo.com/basic-auth\"\nbasicauth(\"postman\", \"password\")\n\"Authorization\": \"Basic cG9zdG1hbjpwYXNzd29yZA==\"\n\n\n\n// OAuth1.0a is a specification that defines a protocol that can be used by one\n// service to access \"protected\" resources (endpoints) on another service. A\n// major part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \n// check whether the request calculation works properly in the client. \n// \n// The endpoint supports the HTTP ``Authorization`` header. In case the signature\n// verification fails, the endpoint provides the four debug values,\n// \n// * ``base_uri``\n// * ``normalized_param_string``\n// * ``base_string``\n// * ``signing_key``\n// \n// For more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n// \n// In order to use this endpoint, you can set the following values:\n// \n// > Consumer Key: ``RKCGzna7bv9YD57c``\n// >\n// > Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n// \n// If you are using Postman, also check the \"Add params to header\" and \n// \"Auto add parameters\" boxes.\n\n@name(\"OAuth1.0 Verify Signature\")\nGET \"https://postman-echo.com/oauth1\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n\n", "Postman_Echo_(V2)\\Cookies\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n// \n// To set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.\n\n@name(\"Set Cookies\")\nGET \"https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2\"\n\n\n\n// Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.\n\n@name(\"Get Cookies\")\nGET \"https://postman-echo.com/cookies\"\n\n\n\n// One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.\n\n@name(\"Delete Cookies\")\nGET \"https://postman-echo.com/cookies/delete?foo1&foo2\"\n\n\n\n\n", "Postman_Echo_(V2)\\Headers\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\n// In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers) will reveal the headers as part of the response.\n\n@name(\"Request Headers\")\nGET \"https://postman-echo.com/headers\"\n\n\n\n// This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n// \n// To send your own set of headers, simply add or replace the the URL parameters with your own set.\n\n@name(\"Response Headers\")\nGET \"https://postman-echo.com/response-headers?Content-Type=text/html&Server=apibin\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n\n", "Postman_Echo_(V2)\\Request_Methods\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// The HTTP `GET` request method is meant to retrieve data from a server. The data\n// is identified by a unique URI (Uniform Resource Identifier). \n// \n// A `GET` request can pass parameters to the server using \"Query String \n// Parameters\". For example, in the following request,\n// \n// > http://example.com/hi/there?hand=wave\n// \n// The parameter \"hand\" has the value \"wave\".\n// \n// This endpoint echoes the HTTP headers, request parameters and the complete\n// URI requested.\n\n@name(\"GET Request \")\nGET \"https://postman-echo.com/get?test=123\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n// The HTTP `POST` request method is meant to transfer data to a server \n// (and elicit a response). What data is returned depends on the implementation\n// of the server.\n// \n// A `POST` request can pass parameters to the server using \"Query String \n// Parameters\", as well as the Request Body. For example, in the following request,\n// \n// > POST /hi/there?hand=wave\n// >\n// > <request-body>\n// \n// The parameter \"hand\" has the value \"wave\". The request body can be in multiple\n// formats. These formats are defined by the MIME type of the request. The MIME \n// Type can be set using the ``Content-Type`` HTTP header. The most commonly used \n// MIME types are:\n// \n// * `multipart/form-data`\n// * `application/x-www-form-urlencoded`\n// * `application/json`\n// \n// This endpoint echoes the HTTP headers, request parameters, the contents of\n// the request body and the complete URI requested.\n\n@name(\"POST Request\")\nPOST \"https://postman-echo.com/post\"\n\"Content-Type\": \"text/plain\"\ntext('Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.')\n\n\n// The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \n// transfer data to a server (and elicit a response). What data is returned depends on the implementation\n// of the server.\n// \n// A `PUT` request can pass parameters to the server using \"Query String \n// Parameters\", as well as the Request Body. For example, in the following \n// raw HTTP request,\n// \n// > PUT /hi/there?hand=wave\n// >\n// > <request-body>\n// \n// \n\n@name(\"PUT Request\")\nPUT \"https://postman-echo.com/put\"\n\"Content-Type\": \"text/plain\"\ntext('Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.')\n\n\n// The HTTP `PATCH` method is used to update resources on a server. The exact\n// use of `PATCH` requests depends on the server in question. There are a number\n// of server implementations which handle `PATCH` differently. Technically, \n// `PATCH` supports both Query String parameters and a Request Body.\n// \n// This endpoint accepts an HTTP `PATCH` request and provides debug information\n// such as the HTTP headers, Query String arguments, and the Request Body.\n\n@name(\"PATCH Request\")\nPATCH \"https://postman-echo.com/patch\"\ntext('Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.')\n\n\n// The HTTP `DELETE` method is used to delete resources on a server. The exact\n// use of `DELETE` requests depends on the server implementation. In general, \n// `DELETE` requests support both, Query String parameters as well as a Request \n// Body.\n// \n// This endpoint accepts an HTTP `DELETE` request and provides debug information\n// such as the HTTP headers, Query String arguments, and the Request Body.\n\n@name(\"DELETE Request\")\nDELETE \"https://postman-echo.com/delete\"\ntext('Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus. \nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.')\n\n\n\n", "Postman_Echo_(V2)\\Utilities\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// This endpoint allows one to instruct the server which status code to respond with.\n// \n// Every response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \n// A list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n// \n// Note that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.\n\n@name(\"Response Status Code\")\nGET \"https://postman-echo.com/status/200\"\nmultipart(\n\t\"test\" < \"123\"\n)\n\n\n// This endpoint allows one to receive streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n// \n// A streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.\n\n@name(\"Streamed Response\")\nGET \"https://postman-echo.com/stream/10\"\n\n\n\n// Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n// \n// Note that a maximum delay of 10 seconds is accepted by the server.\n\n@name(\"Delay Response\")\nGET \"https://postman-echo.com/delay/3\"\nmultipart(\n\t\"test\" < \"123\"\n)\n\n\n// If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n// \n// This endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.\n\n@name(\"Get UTF8 Encoded Response\")\nGET \"https://postman-echo.com/encoding/utf8\"\n\n\n\n// This endpoint returns the response using [gzip compression algorithm](https://en.wikipedia.org/wiki/Gzip).\n// The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n// \n// HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\n// To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.\n\n@name(\"GZip Compressed Response\")\nGET \"https://postman-echo.com/gzip\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n// This endpoint returns the response using [deflate compression algorithm](https://en.wikipedia.org/wiki/DEFLATE). \n// The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n// \n// HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\n// To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.\n\n@name(\"Deflate Compressed Response\")\nGET \"https://postman-echo.com/deflate\"\n\n\n\n\n", "Postman_Echo_(V2)\\draft_Auth_OAuth2.0\\imported_from_collection.http": "#!/usr/bin/env dothttp\n\n# imported from https://raw.githubusercontent.com/postmanlabs/newman/v5.2.2/test/integration/echo-v2.postman_collection.json\n\n// This endpoint is used to get the `access_token`\n// \n// It requires the following secret client credentials to be sent as part of the form body along with the `authentication code` obtained as part of the `redirect_uri` from the previous request.\n// \n// > code: xWnkliVQJURqB2x1\n// >\n// > grant_type: authorization_code\n// >\n// > redirect_uri: https://www.getpostman.com/oauth2/callback\n// >\n// > client_id: abc123\n// >\n// > client_secret: ssh-secret\n// \n// If the correct credentials are not passed, the server returns with a `401 Unauthorized` response.\n\n@name(\"OAuth2.0 Get Access Token\")\nPOST \"https://postman-echo.com/oauth2/token\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n// Once the bearer token has been obtained, it can be passed as `Authorization` header to access user's resources.\n// \n// > Authorization: Bearer vp7jx...\n// \n// If the `Authorization` header is not passed the endpoint returns `401 Unauthorized`.\n\n@name(\"OAuth2.0 Get Resource\")\nGET \"https://postman-echo.com/oauth2/user/info\"\n\"Authorization\": \"Bearer vp7jxTwqgczoFHs0uIdOvv4VdBWmvCkbVbNBCuaTQ3JZplPS40BaNV47HD1zt7MztQPILJvqYsOs6PfJpFYBgwbaE3CVEKOj\"\nmultipart(\n\t\"code\" < \"xWnkliVQJURqB2x1\",\n\t\"grant_type\" < \"authorization_code\",\n\t\"redirect_uri\" < \"https://www.getpostman.com/oauth2/callback\",\n\t\"client_id\" < \"abc123\",\n\t\"client_secret\" < \"ssh-secret\"\n)\n\n\n\n"}}